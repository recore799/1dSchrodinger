(undo-tree-save-format-version . 1)
"dc1644693bf442cfa6001f9232bd76537de94fa9"
[nil nil nil nil (26565 63655 95668 505000) 0 nil]
([nil nil ((#("
" 0 1 (fontified t)) . 1459) (t 26565 62163 395668 57000)) nil (26565 63655 95667 49000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1459)) nil (26565 63655 95665 177000) 0 nil])
([nil nil ((#("        # Optionally, print a few representative psi values for debugging:
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 75 (face font-lock-comment-face fontified t)) . 1185) (undo-tree-id0 . -74) (undo-tree-id1 . -75) (undo-tree-id2 . -75) (undo-tree-id3 . -75) (undo-tree-id4 . -75) (undo-tree-id5 . -75) (undo-tree-id6 . -75) (undo-tree-id7 . -75) (undo-tree-id8 . -75) (undo-tree-id9 . -75) (undo-tree-id10 . -75) (undo-tree-id11 . -75)) nil (26565 63655 95660 202000) 0 nil])
([nil nil ((#("    def shoot(self, E, target_nodes):
        psi = self.integrator.numerov(E)
        nodes = self.count_nodes(psi, tol=1e-6)
        diff = nodes - target_nodes
        print(f\"shoot(E={E:.6f}): nodes = {nodes}, target_nodes = {target_nodes}, diff = {diff}\")

        indices = np.linspace(0, len(psi)-1, 10, dtype=int)
        psi_sample = psi[indices]
        print(f\"  Sample psi values at indices {indices.tolist()}: {psi_sample}\")

        return diff

" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 13 (face font-lock-function-name-face fontified t) 13 14 (fontified t) 14 18 (face font-lock-keyword-face fontified t) 18 46 (fontified t) 46 49 (face font-lock-variable-name-face fontified t) 49 50 (fontified t) 50 51 (face font-lock-operator-face fontified t) 51 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 87 (fontified t) 87 92 (face font-lock-variable-name-face fontified t) 92 93 (fontified t) 93 94 (face font-lock-operator-face fontified t) 94 95 (fontified t) 95 99 (face font-lock-keyword-face fontified t) 99 120 (fontified t) 120 121 (face font-lock-operator-face fontified t) 121 123 (fontified t) 123 124 (face font-lock-operator-face fontified t) 124 135 (fontified t) 135 139 (face font-lock-variable-name-face fontified t) 139 140 (fontified t) 140 141 (face font-lock-operator-face fontified t) 141 148 (fontified t) 148 149 (face font-lock-operator-face fontified t) 149 171 (fontified t) 171 176 (face font-lock-builtin-face fontified t) 176 178 (fontified t) 178 187 (face font-lock-string-face fontified t) 187 194 (face nil fontified t) 194 205 (face font-lock-string-face fontified t) 205 212 (face nil fontified t) 212 229 (face font-lock-string-face fontified t) 229 243 (face nil fontified t) 243 252 (face font-lock-string-face fontified t) 252 258 (face nil fontified t) 258 259 (face font-lock-string-face fontified t) 259 270 (fontified t) 270 277 (face font-lock-variable-name-face fontified t) 277 278 (fontified t) 278 279 (face font-lock-operator-face fontified t) 279 295 (fontified t) 295 298 (face font-lock-builtin-face fontified t) 298 303 (fontified t) 303 304 (face font-lock-operator-face fontified t) 304 316 (fontified t) 316 317 (face font-lock-operator-face fontified t) 317 320 (face font-lock-builtin-face fontified t) 320 330 (fontified t) 330 340 (face font-lock-variable-name-face fontified t) 340 341 (fontified t) 341 342 (face font-lock-operator-face fontified t) 342 364 (fontified t) 364 369 (face font-lock-builtin-face fontified t) 369 371 (fontified t) 371 403 (face font-lock-string-face fontified t) 403 421 (face nil fontified t) 421 423 (face font-lock-string-face fontified t) 423 435 (face nil fontified t) 435 436 (face font-lock-string-face fontified t) 436 447 (fontified t) 447 453 (face font-lock-keyword-face fontified t) 453 460 (fontified t)) . 923) (undo-tree-id16 . -459) (undo-tree-id17 . -459) (undo-tree-id18 . -459) (undo-tree-id19 . -459) 1382 (t 26565 63655 100592 820000)) nil (26566 27 125451 70000) 0 nil])
([nil nil ((922 . 927)) nil (26566 27 125445 781000) 0 nil])
([nil nil ((927 . 940)) nil (26566 27 125444 912000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -939) (undo-tree-id15 . -1) 940) nil (26566 27 125443 723000) 0 nil])
([nil nil ((939 . 940)) nil (26566 27 125441 678000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified t)) . -939) (undo-tree-id14 . -1) 940) nil (26566 27 125440 84000) 0 nil])
([nil nil ((940 . 947) (939 . 941) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -939) (939 . 940)) nil (26566 27 125437 584000) 0 nil])
([nil nil ((948 . 949) (#(")" 0 1 (fontified nil)) . 948) (947 . 948)) nil (26566 27 125435 740000) 0 nil])
([nil nil ((951 . 959) (#("        " 0 8 (fontified nil)) . 950) (undo-tree-id13 . -8) (949 . 959)) nil (26566 27 125433 903000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -955) (undo-tree-id12 . -4) 959) nil (26566 27 125431 393000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -951) (undo-tree-id11 . -4) 955) nil (26566 27 125429 313000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -949) (undo-tree-id9 . -1) (#("
" 0 1 (fontified t)) . -950) (undo-tree-id10 . -1) 951) nil (26566 27 125426 994000) 0 nil])
([nil nil ((949 . 958)) nil (26566 27 125423 554000) 0 nil])
([nil nil ((958 . 969)) nil (26566 27 125422 675000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -975) (undo-tree-id8 . -1) (969 . 976)) nil (26566 27 125421 487000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -969) (undo-tree-id7 . -1) (964 . 970)) nil (26566 27 125418 956000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 990) (988 . 990) (987 . 989) (#("(" 0 1 (fontified nil)) . -987) (980 . 988)) nil (26566 27 125416 277000) 0 nil])
([nil nil ((990 . 999)) nil (26566 27 125414 155000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1009) (undo-tree-id6 . -1) (999 . 1010)) nil (26566 27 125412 921000) 0 nil])
([nil nil ((990 . 999) 967) nil (26566 27 125410 441000) 0 nil])
([nil nil ((999 . 1001)) nil (26566 27 125408 961000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-comment-face fontified t)) . -1000) (undo-tree-id5 . -1) 1001) nil (26566 27 125407 796000) 0 nil])
([nil nil ((1000 . 1012)) nil (26566 27 125405 291000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -1008) (undo-tree-id1 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -1009) (undo-tree-id2 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -1010) (undo-tree-id3 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1011) (undo-tree-id4 . -1) 1012) nil (26566 27 125403 41000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . -1007) (undo-tree-id0 . -1) 1008) nil (26566 27 125393 1000) 0 nil])
([nil nil ((1007 . 1028)) nil (26566 27 125371 268000) 0 nil])
([nil nil ((1028 . 1049)) nil (26566 27 125369 1000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-comment-face fontified nil)) . -1052) (1049 . 1053)) nil (26566 27 125359 322000) 0 nil])
([nil nil ((1071 . 1076) (t 26566 27 143572 932000) 1053) nil (26566 406 708112 292000) 0 nil])
([nil nil ((1073 . 1077) (#("    " 0 4 (fontified nil)) . 1072) (undo-tree-id66 . -4) (1076 . 1077)) nil (26566 406 708110 667000) 0 nil])
([nil nil ((1077 . 1091)) nil (26566 406 708108 162000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-function-name-face fontified t)) . -1081) (undo-tree-id56 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1082) (undo-tree-id57 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -1083) (undo-tree-id58 . -1) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -1084) (undo-tree-id59 . -1) (#("_" 0 1 (face font-lock-function-name-face fontified t)) . -1085) (undo-tree-id60 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1086) (undo-tree-id61 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1087) (undo-tree-id62 . -1) (#("g" 0 1 (face font-lock-function-name-face fontified t)) . -1088) (undo-tree-id63 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1089) (undo-tree-id64 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -1090) (undo-tree-id65 . -1) 1091) nil (26566 406 708105 151000) 0 nil])
([nil nil ((1081 . 1091)) nil (26566 406 708084 642000) 0 nil])
([nil nil ((1092 . 1098) (1091 . 1093) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -1091) (1091 . 1092)) nil (26566 406 708079 990000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1096) (undo-tree-id54 . -1) (#(" " 0 1 (fontified t)) . -1097) (undo-tree-id55 . -1) 1098) nil (26566 406 708074 34000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 1100) (1099 . 1100) (#(")" 0 1 (fontified nil)) . -1099) (1096 . 1100)) nil (26566 406 708068 260000) 0 nil])
([nil nil ((1100 . 1105)) nil (26566 406 708066 35000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1101) (undo-tree-id53 . -4) 1105) nil (26566 406 708064 499000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1100) (undo-tree-id52 . -1) 1101) nil (26566 406 708061 132000) 0 nil])
([nil nil ((1100 . 1101)) nil (26566 406 708058 17000) 0 nil])
([nil nil ((1101 . 1110)) nil (26566 406 708056 432000) 0 nil])
([nil nil ((1110 . 1123)) nil (26566 406 708054 950000) 0 nil])
([nil nil ((1123 . 1131)) nil (26566 406 708053 631000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1123) (undo-tree-id44 . -1) (#("o" 0 1 (fontified t)) . -1124) (undo-tree-id45 . -1) (#("u" 0 1 (fontified t)) . -1125) (undo-tree-id46 . -1) (#("n" 0 1 (fontified t)) . -1126) (undo-tree-id47 . -1) (#("d" 0 1 (fontified t)) . -1127) (undo-tree-id48 . -1) (#("a" 0 1 (fontified t)) . -1128) (undo-tree-id49 . -1) (#("r" 0 1 (fontified t)) . -1129) (undo-tree-id50 . -1) (#("y" 0 1 (fontified t)) . -1130) (undo-tree-id51 . -1) 1131) nil (26566 406 708049 900000) 0 nil])
([nil nil ((1130 . 1140) (1129 . 1131) (#("(" 0 1 (fontified nil)) . -1129) (1123 . 1130)) nil (26566 406 708031 220000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1140) (undo-tree-id43 . -1) (1140 . 1141)) nil (26566 406 708027 10000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t)) . -1098) (undo-tree-id42 . -1) 1099) nil (26566 406 708020 893000) 0 nil])
([nil nil ((1098 . 1101)) nil (26566 406 708017 523000) 0 nil])
([nil nil ((1101 . 1110)) nil (26566 406 708016 446000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1109) (undo-tree-id41 . -1) 1110) nil (26566 406 708014 323000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1110) (undo-tree-id40 . -1) (1109 . 1111)) nil (26566 406 708009 658000) 0 nil])
([nil nil ((1150 . 1171)) nil (26566 406 708006 656000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-operator-face fontified t)) . -1170) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 1171) nil (26566 406 708003 791000) 0 nil])
([nil nil ((1170 . 1174)) nil (26566 406 707961 981000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1174) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (1174 . 1175)) nil (26566 498 404487 800000) 0 nil])
([nil nil ((#("    def find_eigenvalue(self, target_nodes, E_min, E_max, tol=1e-6):
        \"\"\"
        Finds the eigenvalue using the shooting method.
        \"\"\"
        return bisect(self.shoot, E_min, E_max, args=(target_nodes,), xtol=tol)

" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 23 (face font-lock-function-name-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-keyword-face fontified t) 28 61 (fontified t) 61 62 (face font-lock-operator-face fontified t) 62 64 (fontified t) 64 65 (face font-lock-operator-face fontified t) 65 77 (fontified t) 77 79 (face font-lock-doc-face fontified t) 79 80 (face font-lock-doc-face syntax-table (15) fontified t) 80 117 (face font-lock-doc-face fontified t) 117 137 (face font-lock-doc-face fontified t) 137 145 (face font-lock-doc-face fontified t) 145 146 (face font-lock-doc-face syntax-table (15) fontified t) 146 148 (face font-lock-doc-face fontified t) 148 157 (fontified t) 157 163 (face font-lock-keyword-face fontified t) 163 171 (fontified t) 171 175 (face font-lock-keyword-face fontified t) 175 201 (fontified t) 201 202 (face font-lock-operator-face fontified t) 202 223 (fontified t) 223 224 (face font-lock-operator-face fontified t) 224 230 (fontified t)) . 1178) (undo-tree-id568 . -77) (undo-tree-id569 . -77) (undo-tree-id570 . -77) (undo-tree-id571 . -77) (undo-tree-id572 . -148) (undo-tree-id573 . -77) (undo-tree-id574 . -4) (undo-tree-id575 . -68) (undo-tree-id576 . -4) (undo-tree-id577 . -68) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -77) (undo-tree-id585 . -77) (undo-tree-id586 . -77) (undo-tree-id587 . -77) (undo-tree-id588 . -148) (undo-tree-id589 . -77) (undo-tree-id590 . -4) (undo-tree-id591 . -68) (undo-tree-id592 . -4) (undo-tree-id593 . -68) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -77) (undo-tree-id601 . -77) (undo-tree-id602 . -77) (undo-tree-id603 . -77) (undo-tree-id604 . -77) (undo-tree-id605 . -148) (undo-tree-id606 . -77) (undo-tree-id607 . -4) (undo-tree-id608 . -68) (undo-tree-id609 . -4) (undo-tree-id610 . -68) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (t 26566 406 732951 544000)) ((1178 . 1408)) (26566 504 805628 737000) 0 nil])
([nil nil ((1176 . 1185)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 1176) (undo-tree-id523 . -8) (undo-tree-id524 . -9) (undo-tree-id525 . -9) (undo-tree-id526 . -9) (undo-tree-id527 . -9) (undo-tree-id528 . -9) (undo-tree-id529 . -9) (undo-tree-id530 . -9) (undo-tree-id531 . -9) (undo-tree-id532 . -9) (undo-tree-id533 . -9) (undo-tree-id534 . -9) (undo-tree-id535 . -9) (undo-tree-id536 . -9) (undo-tree-id537 . -9) (undo-tree-id538 . -9) (undo-tree-id539 . -9) (undo-tree-id540 . -9) (undo-tree-id541 . -9) (undo-tree-id542 . -9) (undo-tree-id543 . -9) (undo-tree-id544 . -9) (undo-tree-id545 . -9) (undo-tree-id546 . -9) (undo-tree-id547 . -9) (undo-tree-id548 . -9) (undo-tree-id549 . -9) (undo-tree-id550 . -9) (undo-tree-id551 . -9) (undo-tree-id552 . -1) (undo-tree-id553 . -8) (undo-tree-id554 . -8) (undo-tree-id555 . -8) (undo-tree-id556 . -8) (undo-tree-id557 . -8) (undo-tree-id558 . -8) (undo-tree-id559 . -8) (undo-tree-id560 . -8) (undo-tree-id561 . -8) (undo-tree-id562 . -8) (undo-tree-id563 . -8) (undo-tree-id564 . -8) (undo-tree-id565 . -9) (undo-tree-id566 . -8) (undo-tree-id567 . -8)) (26566 505 105327 521000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . 1202) (1185 . 1203)) ((#("return eigenvaluej" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil)) . 1185) (undo-tree-id493 . -16) (undo-tree-id494 . -7) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -16) (undo-tree-id510 . -16) (undo-tree-id511 . -16) (undo-tree-id512 . -16) (undo-tree-id513 . -16) (undo-tree-id514 . -16) (undo-tree-id515 . -16) (undo-tree-id516 . -16) (undo-tree-id517 . -16) (undo-tree-id518 . -16) (undo-tree-id519 . -16) (undo-tree-id520 . -16) (undo-tree-id521 . -16) (undo-tree-id522 . -16) (1202 . 1203)) (26566 505 675150 718000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . 1192) (1192 . 1193) (#("eigenvalue" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . 1192) (undo-tree-id617 . -9) (undo-tree-id618 . -9) (undo-tree-id619 . -9) (undo-tree-id620 . -9) (undo-tree-id621 . -9) (undo-tree-id622 . -9) (undo-tree-id623 . -9) (undo-tree-id624 . -9) (undo-tree-id625 . -9) (undo-tree-id626 . -9) (undo-tree-id627 . -9) (undo-tree-id628 . -9) (undo-tree-id629 . -9) (undo-tree-id630 . -9) (undo-tree-id631 . -9) (undo-tree-id632 . -9) (undo-tree-id633 . -9) (undo-tree-id634 . -9) (undo-tree-id635 . -9) (undo-tree-id636 . -9) (undo-tree-id637 . -9) (undo-tree-id638 . -9) (undo-tree-id639 . -9) (undo-tree-id640 . -9) (undo-tree-id641 . -9) (undo-tree-id642 . -9)) ((1192 . 1202) (#("j" 0 1 (fontified nil)) . 1192) (1192 . 1193)) (26566 506 174161 846000) 0 nil])
([nil nil ((#("bisect(boundary, E_min, E_max, xtol=1e-6 )" 0 6 (fontified t) 6 35 (fontified t) 35 36 (face font-lock-operator-face fontified t) 36 38 (fontified t) 38 39 (face font-lock-operator-face fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t)) . 1134) (undo-tree-id643 . -42) (undo-tree-id644 . -41) (undo-tree-id645 . -41) (undo-tree-id646 . -41) (undo-tree-id647 . -41) (undo-tree-id648 . -41) (undo-tree-id649 . -41) (undo-tree-id650 . -41) (undo-tree-id651 . -41) (undo-tree-id652 . -41) (undo-tree-id653 . -41) (undo-tree-id654 . -41) (undo-tree-id655 . -41) (undo-tree-id656 . -41) (undo-tree-id657 . -41) (undo-tree-id658 . -41) (undo-tree-id659 . -41)) ((1134 . 1176)) (26566 506 513333 467000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1191 . 1192) (1150 . 1192)) ((#("bisect(boundary, E_min, E_max, xtol=1e-6 )" 0 35 (fontified nil) 35 36 (face font-lock-operator-face fontified nil) 36 38 (fontified nil) 38 39 (face font-lock-operator-face fontified nil) 39 41 (fontified nil) 41 42 (fontified nil rear-nonsticky nil)) . 1150) (nil rear-nonsticky t 1191 . 1192)) (26566 506 924366 858000) 0 nil])
([nil nil ((#("        eigenvalue = 
" 0 8 (fontified t) 8 18 (face font-lock-variable-name-face fontified t) 18 19 (fontified t) 19 20 (face font-lock-operator-face fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 1113) (undo-tree-id660 . -20) (undo-tree-id661 . -20) (undo-tree-id662 . -21) (undo-tree-id663 . -21) (undo-tree-id664 . -21) (undo-tree-id665 . -20) (undo-tree-id666 . -20) (undo-tree-id667 . -20) (undo-tree-id668 . -22)) ((1113 . 1135)) (26566 507 343084 187000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . 1074) (1072 . 1075) (1071 . 1073) (#("[" 0 1 (fontified nil)) . 1071) (1071 . 1072)) ((#("[" 0 1 (fontified nil)) . 1071) (1071 . 1072) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 1071) (#("-1j" 0 1 (face font-lock-operator-face fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1072) (1074 . 1075)) (26566 507 587650 670000) 0 nil] [nil nil ((#("self.integrator.numerov(E)" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 23 (fontified t) 23 26 (fontified t)) . 964) (undo-tree-id398 . -25) (undo-tree-id399 . -6) (undo-tree-id400 . -6) (undo-tree-id401 . -6) (undo-tree-id402 . -6) (undo-tree-id403 . -6) (undo-tree-id404 . -6) (undo-tree-id405 . -6) (undo-tree-id406 . -6) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -6) (undo-tree-id410 . -6) (undo-tree-id411 . -6) (undo-tree-id412 . -6) (undo-tree-id413 . -6) (undo-tree-id414 . -6) (undo-tree-id415 . -5) (undo-tree-id416 . -5) (undo-tree-id417 . -5) (undo-tree-id418 . -5) (undo-tree-id419 . -5) (undo-tree-id420 . -5) (undo-tree-id421 . -5) (undo-tree-id422 . -5) (undo-tree-id423 . -5) (undo-tree-id424 . -5) (undo-tree-id425 . -5) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -26)) ((964 . 990)) (26566 448 567376 741000) 0 nil] [nil nil ((#("        # Return the value of the wavefuncion at the boundary
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 61 (face font-lock-comment-face fontified t) 61 62 (face font-lock-comment-face fontified t)) . 991) (undo-tree-id67 . -61) (undo-tree-id68 . -20) (undo-tree-id69 . -20) (undo-tree-id70 . -20) (undo-tree-id71 . -20) (undo-tree-id72 . -20) (undo-tree-id73 . -20) (undo-tree-id74 . -20) (undo-tree-id75 . -20) (undo-tree-id76 . -20) (undo-tree-id77 . -20) (undo-tree-id78 . -20) (undo-tree-id79 . -20) (undo-tree-id80 . -20) (undo-tree-id81 . -20) (undo-tree-id82 . -20) (undo-tree-id83 . -20) (undo-tree-id84 . -20) (undo-tree-id85 . -20) (undo-tree-id86 . -20) (undo-tree-id87 . -20) (undo-tree-id88 . -20) (undo-tree-id89 . -20) (undo-tree-id90 . -20) (undo-tree-id91 . -20) (undo-tree-id92 . -20) (undo-tree-id93 . -62) 1011) ((991 . 1053)) (26566 443 158620 419000) 0 nil])
([nil nil ((#("find_" 0 5 (fontified t)) . 1361) (undo-tree-id669 . -4) (undo-tree-id670 . -4) (undo-tree-id671 . -4)) ((1361 . 1366)) (26566 507 967141 449000) 0 nil])
nil
nil
([nil nil ((1361 . 1362)) ((#("l" 0 1 (fontified t)) . 1361) (undo-tree-id478 . -1) (undo-tree-id480 . -1) (undo-tree-id482 . -1) (undo-tree-id484 . -1) (undo-tree-id486 . -1) (undo-tree-id488 . -1) (undo-tree-id490 . -1) (undo-tree-id492 . -1)) (26566 508 290963 625000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . 1361) (1361 . 1362) (#("l" 0 1 (fontified t)) . 1361) (undo-tree-id672 . -1)) ((1361 . 1362) (#("j" 0 1 (fontified nil)) . 1361) (1361 . 1362)) (26566 508 741934 211000) 0 nil])
([nil nil ((1162 . 1166)) nil (26566 522 264228 406000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1182) (undo-tree-id673 . -1) (1169 . 1183) (1168 . 1170) (#("(" 0 1 (face font-lock-operator-face fontified nil)) . -1168) (1166 . 1169)) nil (26566 522 264222 576000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1081) (undo-tree-id700 . -1) (1076 . 1082) (t 26566 522 267040 180000) 1076) nil (26566 1081 162083 502000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1077) (undo-tree-id699 . -4) 1081) nil (26566 1081 162080 287000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2179 . 2180) (nil fontified nil 1077 . 2180) (1077 . 2180)) nil (26566 1081 162214 48000) 0 nil])
([nil nil ((1080 . 1081) 1156) nil (26566 1111 120852 228000) 0 nil] [nil nil ((#("   def bracket_eigenvalue(self, target_nodes, E_min, E_max, num=1000, tol=1e-6):
" 0 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 25 (face font-lock-function-name-face fontified t) 25 26 (fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 63 (fontified t) 63 64 (face font-lock-operator-face fontified t) 64 73 (fontified t) 73 74 (face font-lock-operator-face fontified t) 74 76 (fontified t) 76 77 (face font-lock-operator-face fontified t) 77 81 (fontified t)) . 1077) (undo-tree-id674 . -80) (undo-tree-id675 . -81) (undo-tree-id676 . -81) (undo-tree-id677 . -81) (undo-tree-id678 . -79) (undo-tree-id679 . -79) (undo-tree-id680 . -79) (undo-tree-id681 . -79) (undo-tree-id682 . -79) (undo-tree-id683 . -79) (undo-tree-id684 . -79) (undo-tree-id685 . -79) (undo-tree-id686 . -79) (undo-tree-id687 . -79) (undo-tree-id688 . -79) (undo-tree-id689 . -79) (undo-tree-id690 . -79) (undo-tree-id691 . -79) (undo-tree-id692 . -79) (undo-tree-id693 . -79) (undo-tree-id694 . -79) (undo-tree-id695 . -79) (undo-tree-id696 . -79) (undo-tree-id697 . -79) (undo-tree-id698 . -81) 1156) ((1077 . 1158)) (26566 1081 162070 917000) 0 nil])
([nil nil ((1987 . 1991) 1979) nil (26566 1111 120851 69000) 0 nil])
nil
([nil nil ((2011 . 2027) (#("            " 0 12 (fontified t)) . 2011)) nil (26566 1111 120849 570000) 0 nil])
([nil nil ((1987 . 1988) (#("    " 0 4 (fontified t)) . -1987) (undo-tree-id716 . -4) 1991) nil (26566 1111 120847 980000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1987) (undo-tree-id715 . -1) 1988) nil (26566 1111 120845 306000) 0 nil])
([nil nil ((1987 . 1988)) nil (26566 1111 120842 608000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -1987) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (1987 . 1988) (#("j" 0 1 (fontified t)) . -1987) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) 1988) nil (26566 1111 120839 985000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2019) (undo-tree-id701 . -4) (undo-tree-id702 . -4) 2014) nil (26566 1111 120823 68000) 0 nil])
([nil nil ((#("    def eigenvalue(self, E_min, E_max):
        return bisect(boundary, E_min, E_max, args=(target_nodes,) xtol=1e-6 )

" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 18 (face font-lock-function-name-face fontified t) 18 19 (fontified t) 19 23 (face font-lock-keyword-face fontified t) 23 37 (fontified t) 37 40 (fontified t) 40 48 (fontified t) 48 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 90 (fontified t) 90 91 (face font-lock-operator-face fontified t) 91 105 (fontified t) 105 106 (fontified t) 106 111 (fontified t) 111 112 (face font-lock-operator-face fontified t) 112 114 (fontified t) 114 115 (face font-lock-operator-face fontified t) 115 117 (fontified t) 117 118 (fontified t rear-nonsticky t) 118 119 (fontified t) 119 120 (fontified t)) . 2182) (undo-tree-id753 . -119) (undo-tree-id754 . -119) (undo-tree-id755 . -119) (undo-tree-id756 . -120) (undo-tree-id757 . -119) (undo-tree-id758 . -119) (undo-tree-id759 . -40) (undo-tree-id760 . -40) (undo-tree-id761 . -54) (undo-tree-id762 . -40) (undo-tree-id763 . -40) (undo-tree-id764 . -55) (undo-tree-id765 . -47) (undo-tree-id766 . -40) (undo-tree-id767 . -40) (t 26566 1111 127300 347000)) nil (26566 1656 392656 587000) 0 nil])
([nil nil ((2181 . 2186)) nil (26566 1656 392641 975000) 0 nil])
([nil nil ((2201 . 2207) (2200 . 2202) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -2200) (2186 . 2201)) nil (26566 1656 392640 902000) 0 nil])
([nil nil ((2207 . 2228)) nil (26566 1656 392639 536000) 0 nil])
([nil nil ((2228 . 2236)) nil (26566 1656 392638 621000) 0 nil])
([nil nil ((2236 . 2243)) nil (26566 1656 392637 807000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -2242) (undo-tree-id752 . -1) 2243) nil (26566 1656 392636 570000) 0 nil])
([nil nil ((2244 . 2245) (#(")" 0 1 (fontified nil)) . 2244) (2243 . 2244) (#(")" 0 1 (fontified nil)) . -2243) (2242 . 2244)) nil (26566 1656 392634 232000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -2255) (undo-tree-id750 . -1) (2247 . 2256) (#("        " 0 8 (fontified nil)) . 2246) (undo-tree-id751 . -8) (2245 . 2255)) nil (26566 1656 392632 145000) 0 nil])
([nil nil ((2257 . 2259) (#("k" 0 1 (fontified nil)) . -2257) (undo-tree-id748 . -1) (2256 . 2258) (#("k" 0 1 (fontified nil)) . -2256) (undo-tree-id749 . -1) (2255 . 2257)) nil (26566 1656 392605 386000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -2255) (undo-tree-id743 . -1) (2255 . 2256) (#("j" 0 1 (fontified t)) . -2255) (undo-tree-id744 . -1) (#("k" 0 1 (fontified t)) . -2256) (undo-tree-id745 . -1) (#("k" 0 1 (fontified t)) . -2257) (undo-tree-id746 . -1) (#("a" 0 1 (fontified t)) . -2258) (undo-tree-id747 . -1) 2259) nil (26566 1656 392600 775000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -2255) (undo-tree-id742 . -1) (2246 . 2256)) nil (26566 1656 392593 638000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -2247) (undo-tree-id741 . -8) 2255) nil (26566 1656 392591 360000) 0 nil])
([nil nil ((2246 . 2254)) nil (26566 1656 392589 36000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-doc-face fontified nil)) . -2260) (undo-tree-id740 . -1) (2258 . 2261) (#("\"" 0 1 (face font-lock-doc-face fontified nil)) . 2258) (2257 . 2258) (2256 . 2258) (#("\"" 0 1 (syntax-table (15) face font-lock-doc-face fontified nil)) . -2256) (2256 . 2257) (#("\"" 0 1 (syntax-table (15) face font-lock-doc-face fontified nil)) . 2256) (2255 . 2256) (2254 . 2256) (#("\"" 0 1 (fontified nil)) . -2254) (2254 . 2255)) nil (26566 1656 392587 195000) 0 nil])
([nil nil ((2257 . 2266)) nil (26566 1656 392583 299000) 0 nil])
([nil nil ((2266 . 2287)) nil (26566 1656 392582 525000) 0 nil])
([nil nil ((2287 . 2300)) nil (26566 1656 392581 746000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . -2299) (undo-tree-id739 . -1) 2300) nil (26566 1656 392580 724000) 0 nil])
([nil nil ((2299 . 2320)) nil (26566 1656 392578 769000) 0 nil])
([nil nil ((2320 . 2322)) nil (26566 1656 392577 878000) 0 nil])
([nil nil ((2322 . 2331)) nil (26566 1656 392576 935000) 0 nil])
([nil nil ((2331 . 2339)) nil (26566 1656 392576 84000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -2336) (undo-tree-id736 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -2337) (undo-tree-id737 . -1) (#("t" 0 1 (face font-lock-doc-face fontified t)) . -2338) (undo-tree-id738 . -1) 2339) nil (26566 1656 392574 273000) 0 nil])
([nil nil ((2345 . 2350) (#("k" 0 1 (face font-lock-doc-face fontified nil)) . -2345) (undo-tree-id735 . -1) (2336 . 2346)) nil (26566 1656 392569 391000) 0 nil])
([nil nil ((2350 . 2371)) nil (26566 1656 392567 178000) 0 nil])
([nil nil ((2371 . 2376)) nil (26566 1656 392566 147000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-doc-face fontified t)) . -2375) (undo-tree-id734 . -1) 2376) nil (26566 1656 392564 908000) 0 nil])
([nil nil ((2375 . 2396)) nil (26566 1656 392562 603000) 0 nil])
([nil nil ((2416 . 2418) (#("(" 0 1 (face font-lock-doc-face fontified nil)) . -2416) (2396 . 2417)) nil (26566 1656 392561 509000) 0 nil])
([nil nil ((2420 . 2422) (#("(" 0 1 (face font-lock-doc-face fontified nil)) . -2420) (2417 . 2421)) nil (26566 1656 392560 134000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-doc-face fontified nil)) . -2429) (2428 . 2430) (#(")" 0 1 (face font-lock-doc-face fontified nil)) . 2428) (2425 . 2428) (#(")" 0 1 (face font-lock-doc-face fontified nil)) . 2425) (2421 . 2425)) nil (26566 1656 392558 443000) 0 nil])
([nil nil ((2432 . 2441) 2428) nil (26566 1656 392556 651000) 0 nil])
([nil nil ((2434 . 2442) (#("        " 0 8 (fontified nil)) . 2433) (undo-tree-id733 . -8) (2441 . 2442)) nil (26566 1656 392555 263000) 0 nil])
([nil nil ((2448 . 2463) (#("k" 0 1 (face font-lock-comment-face fontified nil)) . -2448) (undo-tree-id732 . -1) (2442 . 2449)) nil (26566 1656 392552 955000) 0 nil])
([nil nil ((2463 . 2484)) nil (26566 1656 392550 626000) 0 nil])
([nil nil ((2484 . 2486)) nil (26566 1656 392549 748000) 0 nil])
([nil nil ((2486 . 2495)) nil (26566 1656 392548 811000) 0 nil])
([nil nil ((2501 . 2514) (#("k" 0 1 (fontified nil)) . -2501) (undo-tree-id731 . -1) (2495 . 2502)) nil (26566 1656 392547 714000) 0 nil])
([nil nil ((2514 . 2516) (#("k" 0 1 (fontified nil)) . -2514) (undo-tree-id730 . -1) (2514 . 2515)) nil (26566 1656 392545 475000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2513) (undo-tree-id727 . -1) (#("k" 0 1 (fontified t)) . -2514) (undo-tree-id728 . -1) (#("c" 0 1 (fontified t)) . -2515) (undo-tree-id729 . -1) 2516) nil (26566 1656 392541 353000) 0 nil])
([nil nil ((2531 . 2534) (2530 . 2532) (#("(" 0 1 (fontified nil)) . -2530) (2516 . 2531) (#("k" 0 1 (fontified nil)) . -2516) (undo-tree-id726 . -1) (2513 . 2517)) nil (26566 1656 392536 194000) 0 nil])
([nil nil ((2534 . 2550)) nil (26566 1656 392533 395000) 0 nil])
([nil nil ((2550 . 2553)) nil (26566 1656 392532 464000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2552) (undo-tree-id725 . -1) 2553) nil (26566 1656 392531 261000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 2567) (2566 . 2567) (#(")" 0 1 (fontified nil)) . -2566) (2552 . 2567)) nil (26566 1656 392528 854000) 0 nil])
([nil nil ((2567 . 2576)) nil (26566 1656 392527 630000) 0 nil])
([nil nil ((2576 . 2597)) nil (26566 1656 392526 602000) 0 nil])
([nil nil ((2597 . 2609)) nil (26566 1656 392525 757000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -2608) (undo-tree-id724 . -1) 2609) nil (26566 1656 392524 422000) 0 nil])
([nil nil ((2608 . 2617)) nil (26566 1656 392522 50000) 0 nil])
([nil nil ((2617 . 2624)) nil (26566 1656 392520 623000) 0 nil])
([nil nil ((2634 . 2645) (2633 . 2635) (#("(" 0 1 (fontified nil)) . -2633) (2624 . 2634)) nil (26566 1656 392519 393000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . 2661) (2659 . 2661) (2658 . 2660) (#("[" 0 1 (fontified nil)) . -2658) (2655 . 2659) (#("k" 0 1 (fontified nil)) . -2655) (undo-tree-id723 . -1) (2645 . 2656)) nil (26566 1656 392517 124000) 0 nil])
([nil nil ((2675 . 2682) (#("]" 0 1 (fontified nil)) . 2675) (2673 . 2675) (2672 . 2674) (#("[" 0 1 (fontified nil)) . -2672) (2669 . 2673) (#("k" 0 1 (fontified nil)) . -2669) (undo-tree-id722 . -1) (2661 . 2670)) nil (26566 1656 392513 349000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 2686) (2682 . 2686)) nil (26566 1656 392509 351000) 0 nil])
([nil nil ((2686 . 2695)) nil (26566 1656 392507 357000) 0 nil])
([nil current ((#("j" 0 1 (fontified nil)) . -2709) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (2695 . 2710)) nil (26566 1656 392502 296000) 0 nil])
nil
